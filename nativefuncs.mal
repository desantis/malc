(defnativefn mal_and mal_and [x y] (if x y false))
(defnativefn mal_or mal_or [x y] (if x true y))

(defnativefn symbol?  symbol_Q  [obj] (_integer_equal? 17 (_get_type obj)))
(defnativefn string?  string_Q  [obj] (_integer_equal? 18 (_get_type obj)))
(defnativefn keyword? keyword_Q [obj] (_integer_equal? 19 (_get_type obj)))
(defnativefn list?    list_Q    [obj] (_integer_equal? 33 (_get_type obj)))
(defnativefn vector?  vector_Q  [obj] (_integer_equal? 34 (_get_type obj)))
(defnativefn map?     map_Q     [obj] (_integer_equal? 35 (_get_type obj)))
(defnativefn atom?    atom_Q    [obj] (_integer_equal? 49 (_get_type obj)))

(defnativefn equal? equal_Q [a b]
  (if (nil? a)
    (nil? b)
    (if (true? a)
      (true? b)
      (if (false? a)
        (false? b)
        (if (integer? a)
          (mal_and (integer? b) (_integer_equal? a b))
          false))))) ; TODO compare strings, lists, maps, ...

(defnativefn printobj printobj [obj]
  (if (nil? obj)
    (_printbytearray "nil")
    (if (false? obj)
      (_printbytearray "false")
      (if (true? obj)
        (_printbytearray "true")
        (if (integer? obj)
          (_printnumber obj)
          (if (symbol? obj)
            (_printbytearray obj)
            (if (keyword? obj)
              (_printbytearray obj)
              (if (string? obj)
                (do
                  (_printbytearray "{") ; "\"")
                  (_printbytearray obj)
                  (_printbytearray "}")) ; "\""))
                (_printbytearray "DONT-KNOW-HOW-TO-PRINT")))))))))

(defnativefn printlnobj printlnobj [obj]
  (do
    (printobj obj)
    (_printnewline)))
