(def! inc (fn* (a) (+ a 1)))

(def! last
  (fn* [seq]
    (if (empty? seq)
      nil
      (nth seq (- (count seq) 1)))))

(def! number?
  (fn* [o]
    (try* (= o (+ o 0))
      (catch* _ false))))

(def! string/join
  (fn* [separator seq]
    (let*
      [iter (fn* [res xs]
              (cond
                (empty? xs)      ""
                (= (count xs) 1) (str res (first xs))
                'else            (iter (str res (first xs) separator) (rest xs))))]
      (iter "" seq))))

(def! string/length
  (rb* "lambda { |s| s.size }"))

(def! string?
  (fn* [o]
    (= o (str o))))

(def! map-with-index
  (fn* [func seq]
    (let* [loop-func
           (fn* [remaining_seq index result]
             (if (empty? remaining_seq)
               result
               (loop-func (rest remaining_seq) (inc index) (concat result [(func (first remaining_seq) index)]))))]
      (loop-func seq 0 '()))))
