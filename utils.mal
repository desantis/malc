(def! inc (fn* (a) (+ a 1)))

(def! last
  (fn* [seq]
    (if (empty? seq)
      nil
      (nth seq (- (count seq) 1)))))

(def! number?
  (fn* [o]
    (try* (= o (+ o 0))
      (catch* _ false))))

(def! string/join
  (fn* [separator seq]
    (let*
      [iter (fn* [res xs]
              (cond
                (empty? xs)      ""
                (= (count xs) 1) (str res (first xs))
                'else            (iter (str res (first xs) separator) (rest xs))))]
      (iter "" seq))))

(def! string/length
  (fn* [s]
    (count (seq (str s)))))

(def! string?
  (fn* [o]
    (= o (str o))))

(def! map-with-index
  (fn* [func seq]
    (let* [loop-func
           (fn* [remaining-seq seq-index map-result]
             (if (empty? remaining-seq)
               map-result
               (loop-func (rest remaining-seq) (inc seq-index) (concat map-result [(func (first remaining-seq) seq-index)]))))]
      (loop-func seq 0 '()))))

(def! vector-map-with-index
  (fn* [func seq]
    (let* [loop-func
           (fn* [remaining-seq seq-index map-result]
             (if (empty? remaining-seq)
               map-result
               (loop-func (rest remaining-seq) (inc seq-index) (conj map-result (func (first remaining-seq) seq-index)))))]
      (loop-func seq 0 []))))

(def! zip
  (fn* [a b]
    (let* [helper
           (fn* [remain-a remain-b zip-result]
             (let* [both-empty (if (empty? remain-a) (empty? remain-b) false)]
               (if both-empty
                 zip-result
                 (helper (rest remain-a) (rest remain-b) (conj zip-result [(first remain-a) (first remain-b)])))))]
      (helper a b []))))
