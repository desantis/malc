(def! p (fn* [] (printlnobj "hello world" false)))
(p)
;; EXPECTED: hello world

(def! f (fn* [x y] (* y (+ 1 x))))
(printlnobj f false)
;; EXPECTED: #<function args=(x y)>

(printlnobj (f 3 4) false)
;; EXPECTED: 16

(printlnobj (f 2 5) false)
;; EXPECTED: 15

(printlnobj (f (f 3 5) (- 6 2)) false)
;; EXPECTED: 84

(printlnobj "----" false)
;; EXPECTED: ----

(def! f2 (fn* [x y] (do (printlnobj ["f2:" x y] true) (* y (+ 1 x)))))
(printlnobj (f2 (f2 3 5) (- 6 2)) false)
;; EXPECTED: ["f2:" 3 5]
;; EXPECTED: ["f2:" 20 4]
;; EXPECTED: 84

(printlnobj ((fn* [a] (+ a 55)) 22) false)
;; EXPECTED: 77

(printlnobj ( (fn* (a b) (+ b a)) 3 4) false)
;; EXPECTED: 7
(printlnobj ( (fn* () 4) ) false)
;; EXPECTED: 4

(printlnobj ( (fn* (f x) (f x)) (fn* (a) (+ 1 a)) 7) false)
;; EXPECTED: 8

;; Testing closures
(printlnobj ( ( (fn* (a) (fn* (b) (+ a b))) 5) 7) false)
;; EXPECTED: 12

(def! gen-plus5 (fn* () (fn* (b) (+ 5 b))))
(def! plus5 (gen-plus5))
(printlnobj (plus5 7) false)
;; EXPECTED: 12

(def! gen-plusX (fn* (x) (fn* (b) (+ x b))))
(def! plus7 (gen-plusX 7))
(printlnobj (plus7 8) false)
;; EXPECTED: 15

;; Testing variable length arguments

(printlnobj ( (fn* (& more) (count more)) 1 2 3) false)
;; EXPECTED: 3
(printlnobj ( (fn* (& more) (count more)) 1) false)
;; EXPECTED: 1
(printlnobj ( (fn* (& more) (count more)) ) false)
;; EXPECTED: 0
(printlnobj ( (fn* (a & more) (count more)) 1 2 3) false)
;; EXPECTED: 2
(printlnobj ( (fn* (a & more) (count more)) 1) false)
;; EXPECTED: 0
(printlnobj ( (fn* (a & more) [a more]) 1 2 3) false)
;; EXPECTED: [1 (2 3)]
