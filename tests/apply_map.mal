;
; Test apply with Mal functions
;
(def! f1 (fn* [x y] (+ x y)))
(printlnobj f1 false)
;; EXPECTED: #<function args=(x y)>

(printlnobj (apply f1 [3 4]) false)
;; EXPECTED: 7
(printlnobj (apply f1 3 4 []) false)
;; EXPECTED: 7
(printlnobj (apply f1 3 [4]) false)
;; EXPECTED: 7

;
; Test apply with native functions
;
(printlnobj + false)
;; EXPECTED: #<native-function mal_add args=(a b)>

(printlnobj (apply + [3 4]) false)
;; EXPECTED: 7
(printlnobj (apply + 3 4 []) false)
;; EXPECTED: 7
(printlnobj (apply + 3 [4]) false)
;; EXPECTED: 7

(printlnobj (apply count [[2 4 6]]) false)
;; EXPECTED: 3

;
; Test map with Mal functions
;
(def! add3 (fn* [a] (+ 3 a)))

(printlnobj (map add3 [5 6 7 8]) false)
;; EXPECTED: (8 9 10 11)
(printlnobj (map add3 []) false)
;; EXPECTED: ()

;
; Test map with native functions
;
(printlnobj (map count [[5 6] [7] [] [8 9 10 11]]) false)
;; EXPECTED: (2 1 0 4)
(printlnobj (map count (list)) false)
;; EXPECTED: ()
