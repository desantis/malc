(def! x 4)
(printlnobj x false)
;; EXPECTED: 4

(printlnobj (let* (z 9) z) false)
;; EXPECTED: 9
(printlnobj (let* (x 9) x) false)
;; EXPECTED: 9
(printlnobj x false)
;; EXPECTED: 4

(printlnobj (let* (z (+ 2 3)) (+ 1 z)) false)
;; EXPECTED: 6
(printlnobj (let* (p (+ 2 3) q (+ 2 p)) (+ p q)) false)
;; EXPECTED: 12

;; Testing outer environment
(def! a 4)
(printlnobj (let* (q 9) q) false)
;; EXPECTED: 9
(printlnobj (let* (q 9) a) false)
;; EXPECTED: 4
(printlnobj (let* (z 2) (let* (q 9) a)) false)
;; EXPECTED: 4

;; Testing let* with vector bindings
(printlnobj (let* [z 9] z) false)
;; EXPECTED: 9
(printlnobj (let* [p (+ 2 3) q (+ 2 p)] (+ p q)) false)
;; EXPECTED: 12

;; Testing vector evaluation
(printlnobj (let* (a 5 b 6) [3 4 a [b 7] 8]) false)
;; EXPECTED: [3 4 5 [6 7] 8]
